{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tdisu\\\\Documents\\\\REACT\\\\CRDDRS\\\\my-app\\\\src\\\\pages\\\\Dashboard\\\\Usuario\\\\Listar\\\\ListarUsuario.jsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'nome',\n  headerName: 'Nome',\n  width: 280\n}, {\n  field: 'rg',\n  headerName: 'RG',\n  width: 120\n}, {\n  field: 'cpf',\n  headerName: 'CPF',\n  width: 120\n}, {\n  field: 'tel',\n  headerName: 'Telefone',\n  width: 120\n}, {\n  field: 'email',\n  headerName: 'Email',\n  width: 120\n}];\nconst rows = [{\n  id: 1,\n  lastName: 'Snow',\n  firstName: 'Jon',\n  age: 35\n}, {\n  id: 2,\n  lastName: 'Lannister',\n  firstName: 'Cersei',\n  age: 42\n}, {\n  id: 3,\n  lastName: 'Lannister',\n  firstName: 'Jaime',\n  age: 45\n}, {\n  id: 4,\n  lastName: 'Stark',\n  firstName: 'Arya',\n  age: 16\n}, {\n  id: 5,\n  lastName: 'Targaryen',\n  firstName: 'Daenerys',\n  age: null\n}, {\n  id: 6,\n  lastName: 'Melisandre',\n  firstName: null,\n  age: 150\n}, {\n  id: 7,\n  lastName: 'Clifford',\n  firstName: 'Ferrara',\n  age: 44\n}, {\n  id: 8,\n  lastName: 'Frances',\n  firstName: 'Rossini',\n  age: 36\n}, {\n  id: 9,\n  lastName: 'Roxie',\n  firstName: 'Harvey',\n  age: 65\n}];\nexport function ListarUsuario() {\n  _s();\n\n  const [usuario, setUsuario] = React.useState(\"\"); // const [itens, setItens] = React.useState(\"\")\n\n  React.useEffect(() => {\n    axios.get('http://localhost:3001/Usuarios/Listar').then(res => {\n      setUsuario(res.data);\n    }).catch(err => console.log(err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: usuario ? /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: usuario,\n      columns: columns,\n      getRowId: usuario => usuario._id,\n      editable: true,\n      pageSize: 5,\n      rowsPerPageOptions: [5],\n      checkboxSelection: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : null\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n} // import * as React from 'react';\n// import Box from '@mui/material/Box';\n// import Collapse from '@mui/material/Collapse';\n// import IconButton from '@mui/material/IconButton';\n// import Table from '@mui/material/Table';\n// import TableBody from '@mui/material/TableBody';\n// import TableCell from '@mui/material/TableCell';\n// import TableContainer from '@mui/material/TableContainer';\n// import TableHead from '@mui/material/TableHead';\n// import TableRow from '@mui/material/TableRow';\n// import Typography from '@mui/material/Typography';\n// import Paper from '@mui/material/Paper';\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\n// import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\n// import axios from 'axios';\n// import { Button } from '@mui/material';\n// import style from './ListarUsuario.module.scss'\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n// function Row(props) {\n//     const { row, setId, editUser, setItens } = props;\n//     const [open, setOpen] = React.useState(false);\n//     function Editar(id) {\n//       setId(id);\n//       editUser();\n//     }\n//     const DelUser = (e) => {\n//       console.log(e)\n//       setItens(e)\n//       document.getElementById('avisaDel').showModal();\n//       document.getElementById('confirmaDel').innerHTML = (`Confirme para deletar ${e.nome}`)\n//   }\n//     return (\n//       <React.Fragment>\n//         <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n//           <TableCell component=\"th\" scope=\"row\">\n//               <div className={style.botoes}>\n//                   <button title=\"Editar\" onClick={() => Editar(row)}>\n//                       <EditIcon fontSize=\"small\" color='warning' />\n//                   </button>\n//                   <button title=\"Apagar\">\n//                       <DeleteIcon onClick={() => DelUser(row)} fontSize=\"small\" color=\"error\" />\n//                   </button>\n//               </div>\n//           </TableCell>\n//           <TableCell>{row.nome}</TableCell>\n//           <TableCell align=\"right\">{row.rg}</TableCell>\n//           <TableCell align=\"right\">{row.cpf}</TableCell>\n//           <TableCell align=\"right\">{row.tel}</TableCell>\n//           <TableCell align=\"right\">{row.email}</TableCell>\n//           <TableCell>\n//             <IconButton\n//               aria-label=\"expand row\"\n//               size=\"small\"\n//               onClick={() => setOpen(!open)}\n//             >\n//               {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n//             </IconButton>\n//           </TableCell>\n//         </TableRow>\n//         <TableRow>\n//           <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n//             <Collapse in={open} timeout=\"auto\" unmountOnExit>\n//               <Box sx={{ margin: 1 }}>\n//                 <Typography variant=\"h6\" gutterBottom component=\"div\">\n//                   Detalhes\n//                 </Typography>\n//                 <Table size=\"small\" aria-label=\"purchases\">\n//                   <TableHead>\n//                     <TableRow>\n//                       <TableCell>Cep</TableCell>\n//                       <TableCell>Rua</TableCell>\n//                       <TableCell align=\"right\">Numero</TableCell>\n//                       <TableCell align=\"right\">Complemento</TableCell>\n//                       <TableCell align=\"right\">Bairro</TableCell>\n//                       <TableCell align=\"right\">Cidade</TableCell>\n//                       <TableCell align=\"right\">UF</TableCell>\n//                     </TableRow>\n//                   </TableHead>\n//                   <TableBody>\n//                       <TableRow>\n//                         <TableCell component=\"th\" scope=\"row\">{row.cep}</TableCell>\n//                         <TableCell>{row.logradouro}</TableCell>\n//                         <TableCell align=\"center\">{row.numero}</TableCell>\n//                         <TableCell align=\"right\">{row.complemento}</TableCell>\n//                         <TableCell align=\"right\">{row.bairro}</TableCell>\n//                         <TableCell align=\"right\">{row.cidade}</TableCell>\n//                         <TableCell align=\"right\">{row.uf}</TableCell>\n//                       </TableRow>\n//                   </TableBody>\n//                 </Table>\n//               </Box>\n//             </Collapse>\n//           </TableCell>\n//         </TableRow>\n//       </React.Fragment>\n//     );\n//   }   \n//   function descendingComparator(a, b, orderBy) {\n//     if (b[orderBy] < a[orderBy]) {\n//       return -1;\n//     }\n//     if (b[orderBy] > a[orderBy]) {\n//       return 1;\n//     }\n//     return 0;\n//   }\n//   function getComparator(order, orderBy) {\n//     return order === 'desc'\n//       ? (a, b) => descendingComparator(a, b, orderBy)\n//       : (a, b) => -descendingComparator(a, b, orderBy);\n//   }\n//   function stableSort(array, comparator) {\n//     const stabilizedThis = array.map((el, index) => [el, index]);\n//     stabilizedThis.sort((a, b) => {\n//       const order = comparator(a[0], b[0]);\n//       if (order !== 0) {\n//         return order;\n//       }\n//       return a[1] - b[1];\n//     });\n//     return stabilizedThis.map((el) => el[0]);\n//   }\n// export function ListarUsuario({viewUser, setId, editUser}) {\n//   const [usuario, setUsuario] = React.useState(\"\");\n//   const [itens, setItens] = React.useState(\"\")\n//   React.useEffect(() => {\n//     axios.get('http://localhost:3001/Usuarios/Listar')\n//     .then(res => {\n//         setUsuario(res.data)\n//     })\n//     .catch(err => console.log(err))\n//   }, []);\n//   function DeleteUser() {\n//     let { _id } = itens\n//     axios.post('http://localhost:3001/Usuario/Deletar', { _id })\n//     .then(res => {\n//         if (res.data.deletedCount === 0) { return; }\n//         else {\n//             axios.get('http://localhost:3001/Usuarios/Listar')\n//             .then(res => setUsuario(res.data))\n//             .catch(err => console.log(err))\n//     }})\n//     .catch(err => console.log(err))\n//   }\n//   if (usuario) {\n//     return (<>\n//         <dialog id='avisaDel' className={style.DialogoDeletar} onClick={() => document.getElementById(\"avisaDel\").close()}>\n//             <div>\n//                 <p id='confirmaDel'>teste</p>\n//                 <Button onClick={DeleteUser} variant='outlined' >Confirmar</Button>\n//                 <Button onClick={() => document.getElementById(\"avisaDel\").close()} variant='outlined' >Cancelar</Button>\n//             </div>\n//         </dialog>\n//       <TableContainer component={Paper}>\n//         <Table aria-label=\"collapsible table\" size='small'>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell/>\n//               <TableCell>Nome</TableCell>\n//               <TableCell align=\"center\">RG</TableCell>\n//               <TableCell align=\"center\">CPF</TableCell>\n//               <TableCell align=\"center\">Telefone</TableCell>\n//               <TableCell align=\"center\">Email</TableCell>\n//               <TableCell />\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {usuario.map((row) => (\n//               <Row key={row.name} row={row} DeleteUser={DeleteUser} setItens={setItens} setId={setId} viewUser={viewUser} editUser={editUser}/>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n//     </>);\n//   } else {\n//     return null\n//   }\n// }\n// import * as React from 'react';\n// import PropTypes from 'prop-types';\n// import { alpha } from '@mui/material/styles';\n// import Box from '@mui/material/Box';\n// import Table from '@mui/material/Table';\n// import TableBody from '@mui/material/TableBody';\n// import TableCell from '@mui/material/TableCell';\n// import TableContainer from '@mui/material/TableContainer';\n// import TableHead from '@mui/material/TableHead';\n// import TablePagination from '@mui/material/TablePagination';\n// import TableRow from '@mui/material/TableRow';\n// import TableSortLabel from '@mui/material/TableSortLabel';\n// import Toolbar from '@mui/material/Toolbar';\n// import Typography from '@mui/material/Typography';\n// import Paper from '@mui/material/Paper';\n// import Checkbox from '@mui/material/Checkbox';\n// import IconButton from '@mui/material/IconButton';\n// import Tooltip from '@mui/material/Tooltip';\n// import FormControlLabel from '@mui/material/FormControlLabel';\n// import Switch from '@mui/material/Switch';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import FilterListIcon from '@mui/icons-material/FilterList';\n// import { visuallyHidden } from '@mui/utils';\n// function createData(name, calories, fat, carbs, protein) {\n//   return {\n//     name,\n//     calories,\n//     fat,\n//     carbs,\n//     protein,\n//   };\n// }\n// const rows = [\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\n//   createData('Donut', 452, 25.0, 51, 4.9),\n//   createData('Eclair', 262, 16.0, 24, 6.0),\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\n//   createData('Honeycomb', 408, 3.2, 87, 6.5),\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n//   createData('Jelly Bean', 375, 0.0, 94, 0.0),\n//   createData('KitKat', 518, 26.0, 65, 7.0),\n//   createData('Lollipop', 392, 0.2, 98, 0.0),\n//   createData('Marshmallow', 318, 0, 81, 2.0),\n//   createData('Nougat', 360, 19.0, 9, 37.0),\n//   createData('Oreo', 437, 18.0, 63, 4.0),\n// ];\n// function descendingComparator(a, b, orderBy) {\n//   if (b[orderBy] < a[orderBy]) {\n//     return -1;\n//   }\n//   if (b[orderBy] > a[orderBy]) {\n//     return 1;\n//   }\n//   return 0;\n// }\n// function getComparator(order, orderBy) {\n//   return order === 'desc'\n//     ? (a, b) => descendingComparator(a, b, orderBy)\n//     : (a, b) => -descendingComparator(a, b, orderBy);\n// }\n// // This method is created for cross-browser compatibility, if you don't\n// // need to support IE11, you can use Array.prototype.sort() directly\n// function stableSort(array, comparator) {\n//   const stabilizedThis = array.map((el, index) => [el, index]);\n//   stabilizedThis.sort((a, b) => {\n//     const order = comparator(a[0], b[0]);\n//     if (order !== 0) {\n//       return order;\n//     }\n//     return a[1] - b[1];\n//   });\n//   return stabilizedThis.map((el) => el[0]);\n// }\n// const headCells = [];\n// function EnhancedTableHead(props) {\n//   const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\n//     props;\n//   const createSortHandler = (property) => (event) => {\n//     onRequestSort(event, property);\n//   };\n//   return (\n//     <TableHead>\n//       <TableRow>\n//         <TableCell padding=\"checkbox\">\n//           <Checkbox\n//             color=\"primary\"\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\n//             checked={rowCount > 0 && numSelected === rowCount}\n//             onChange={onSelectAllClick}\n//             inputProps={{\n//               'aria-label': 'select all desserts',\n//             }}\n//           />\n//         </TableCell>\n//         {headCells.map((headCell) => (\n//           <TableCell\n//             key={headCell.id}\n//             align={headCell.numeric ? 'right' : 'left'}\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\n//             sortDirection={orderBy === headCell.id ? order : false}\n//           >\n//             <TableSortLabel\n//               active={orderBy === headCell.id}\n//               direction={orderBy === headCell.id ? order : 'asc'}\n//               onClick={createSortHandler(headCell.id)}\n//             >\n//               {headCell.label}\n//               {orderBy === headCell.id ? (\n//                 <Box component=\"span\" sx={visuallyHidden}>\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n//                 </Box>\n//               ) : null}\n//             </TableSortLabel>\n//           </TableCell>\n//         ))}\n//       </TableRow>\n//     </TableHead>\n//   );\n// }\n// EnhancedTableHead.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n//   onRequestSort: PropTypes.func.isRequired,\n//   onSelectAllClick: PropTypes.func.isRequired,\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n//   orderBy: PropTypes.string.isRequired,\n//   rowCount: PropTypes.number.isRequired,\n// };\n// function EnhancedTableToolbar(props) {\n//   const { numSelected } = props;\n//   return (\n//     <Toolbar\n//       sx={{\n//         pl: { sm: 2 },\n//         pr: { xs: 1, sm: 1 },\n//         ...(numSelected > 0 && {\n//           bgcolor: (theme) =>\n//             alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\n//         }),\n//       }}\n//     >\n//       {numSelected > 0 ? (\n//         <Typography\n//           sx={{ flex: '1 1 100%' }}\n//           color=\"inherit\"\n//           variant=\"subtitle1\"\n//           component=\"div\"\n//         >\n//           {numSelected} selected\n//         </Typography>\n//       ) : (\n//         <Typography\n//           sx={{ flex: '1 1 100%' }}\n//           variant=\"h6\"\n//           id=\"tableTitle\"\n//           component=\"div\"\n//         >\n//           Nutrition\n//         </Typography>\n//       )}\n//       {numSelected > 0 ? (\n//         <Tooltip title=\"Delete\">\n//           <IconButton>\n//             <DeleteIcon />\n//           </IconButton>\n//         </Tooltip>\n//       ) : (\n//         <Tooltip title=\"Filter list\">\n//           <IconButton>\n//             <FilterListIcon />\n//           </IconButton>\n//         </Tooltip>\n//       )}\n//     </Toolbar>\n//   );\n// }\n// EnhancedTableToolbar.propTypes = {\n//   numSelected: PropTypes.number.isRequired,\n// };\n// export default function EnhancedTable() {\n//   const [order, setOrder] = React.useState('asc');\n//   const [orderBy, setOrderBy] = React.useState('calories');\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const handleRequestSort = (event, property) => {\n//     const isAsc = orderBy === property && order === 'asc';\n//     setOrder(isAsc ? 'desc' : 'asc');\n//     setOrderBy(property);\n//   };\n//   const handleSelectAllClick = (event) => {\n//     if (event.target.checked) {\n//       const newSelected = rows.map((n) => n.name);\n//       setSelected(newSelected);\n//       return;\n//     }\n//     setSelected([]);\n//   };\n//   const handleClick = (event, name) => {\n//     const selectedIndex = selected.indexOf(name);\n//     let newSelected = [];\n//     if (selectedIndex === -1) {\n//       newSelected = newSelected.concat(selected, name);\n//     } else if (selectedIndex === 0) {\n//       newSelected = newSelected.concat(selected.slice(1));\n//     } else if (selectedIndex === selected.length - 1) {\n//       newSelected = newSelected.concat(selected.slice(0, -1));\n//     } else if (selectedIndex > 0) {\n//       newSelected = newSelected.concat(\n//         selected.slice(0, selectedIndex),\n//         selected.slice(selectedIndex + 1),\n//       );\n//     }\n//     setSelected(newSelected);\n//   };\n//   const handleChangePage = (event, newPage) => {\n//     setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n//   const handleChangeDense = (event) => {\n//     setDense(event.target.checked);\n//   };\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows =\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n//   return (\n//     <Box sx={{ width: '100%' }}>\n//       <Paper sx={{ width: '100%', mb: 2 }}>\n//         <EnhancedTableToolbar numSelected={selected.length} />\n//         <TableContainer>\n//           <Table\n//             sx={{ minWidth: 750 }}\n//             aria-labelledby=\"tableTitle\"\n//             size={dense ? 'small' : 'medium'}\n//           >\n//             <EnhancedTableHead\n//               numSelected={selected.length}\n//               order={order}\n//               orderBy={orderBy}\n//               onSelectAllClick={handleSelectAllClick}\n//               onRequestSort={handleRequestSort}\n//               rowCount={rows.length}\n//             />\n//             <TableBody>\n//               {/* if you don't need to support IE11, you can replace the `stableSort` call with:\n//                  rows.sort(getComparator(order, orderBy)).slice() */}\n//               {stableSort(rows, getComparator(order, orderBy))\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n//                 .map((row, index) => {\n//                   const isItemSelected = isSelected(row.name);\n//                   const labelId = `enhanced-table-checkbox-${index}`;\n//                   return (\n//                     <TableRow\n//                       hover\n//                       onClick={(event) => handleClick(event, row.name)}\n//                       role=\"checkbox\"\n//                       aria-checked={isItemSelected}\n//                       tabIndex={-1}\n//                       key={row.name}\n//                       selected={isItemSelected}\n//                     >\n//                       <TableCell padding=\"checkbox\">\n//                         <Checkbox\n//                           color=\"primary\"\n//                           checked={isItemSelected}\n//                           inputProps={{\n//                             'aria-labelledby': labelId,\n//                           }}\n//                         />\n//                       </TableCell>\n//                       <TableCell\n//                         component=\"th\"\n//                         id={labelId}\n//                         scope=\"row\"\n//                         padding=\"none\"\n//                       >\n//                         {row.name}\n//                       </TableCell>\n//                       <TableCell align=\"right\">{row.calories}</TableCell>\n//                       <TableCell align=\"right\">{row.fat}</TableCell>\n//                       <TableCell align=\"right\">{row.carbs}</TableCell>\n//                       <TableCell align=\"right\">{row.protein}</TableCell>\n//                     </TableRow>\n//                   );\n//                 })}\n//               {emptyRows > 0 && (\n//                 <TableRow\n//                   style={{\n//                     height: (dense ? 33 : 53) * emptyRows,\n//                   }}\n//                 >\n//                   <TableCell colSpan={6} />\n//                 </TableRow>\n//               )}\n//             </TableBody>\n//           </Table>\n//         </TableContainer>\n//         <TablePagination\n//           rowsPerPageOptions={[5, 10, 25]}\n//           component=\"div\"\n//           count={rows.length}\n//           rowsPerPage={rowsPerPage}\n//           page={page}\n//           onPageChange={handleChangePage}\n//           onRowsPerPageChange={handleChangeRowsPerPage}\n//         />\n//       </Paper>\n//       <FormControlLabel\n//         control={<Switch checked={dense} onChange={handleChangeDense} />}\n//         label=\"Dense padding\"\n//       />\n//     </Box>\n//   );\n// }\n\n_s(ListarUsuario, \"OU8QJAwFYWBiEFWZxZh1jbOpAQ0=\");\n\n_c = ListarUsuario;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListarUsuario\");","map":{"version":3,"names":["React","DataGrid","axios","columns","field","headerName","width","rows","id","lastName","firstName","age","ListarUsuario","usuario","setUsuario","useState","useEffect","get","then","res","data","catch","err","console","log","height","_id"],"sources":["C:/Users/tdisu/Documents/REACT/CRDDRS/my-app/src/pages/Dashboard/Usuario/Listar/ListarUsuario.jsx"],"sourcesContent":["import * as React from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport axios from 'axios';\r\n\r\nconst columns = [\r\n  { field: 'nome', headerName: 'Nome', width: 280 },\r\n  { field: 'rg', headerName: 'RG', width: 120 },\r\n  { field: 'cpf', headerName: 'CPF', width: 120 },\r\n  { field: 'tel', headerName: 'Telefone', width: 120 },\r\n  { field: 'email', headerName: 'Email', width: 120 },\r\n];\r\n\r\nconst rows = [\r\n  { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\r\n  { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\r\n  { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\r\n  { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\r\n  { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\r\n  { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\r\n  { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\r\n  { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\r\n  { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\r\n];\r\n\r\nexport function ListarUsuario() {\r\n\r\n\r\n    const [usuario, setUsuario] = React.useState(\"\");\r\n    // const [itens, setItens] = React.useState(\"\")\r\n  \r\n    React.useEffect(() => {\r\n      axios.get('http://localhost:3001/Usuarios/Listar')\r\n      .then(res => {\r\n          setUsuario(res.data)\r\n      })\r\n      .catch(err => console.log(err))\r\n    }, []);\r\n\r\n  return (\r\n    <div style={{ height: 400, width: '100%' }}>\r\n      {usuario ? \r\n        <DataGrid\r\n          rows={usuario}\r\n          columns={columns}\r\n          getRowId={(usuario) => usuario._id}\r\n          editable={true}\r\n          pageSize={5}\r\n          rowsPerPageOptions={[5]}\r\n          checkboxSelection\r\n      />: null}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import * as React from 'react';\r\n// import Box from '@mui/material/Box';\r\n// import Collapse from '@mui/material/Collapse';\r\n// import IconButton from '@mui/material/IconButton';\r\n// import Table from '@mui/material/Table';\r\n// import TableBody from '@mui/material/TableBody';\r\n// import TableCell from '@mui/material/TableCell';\r\n// import TableContainer from '@mui/material/TableContainer';\r\n// import TableHead from '@mui/material/TableHead';\r\n// import TableRow from '@mui/material/TableRow';\r\n// import Typography from '@mui/material/Typography';\r\n// import Paper from '@mui/material/Paper';\r\n// import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\n// import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\n// import axios from 'axios';\r\n// import { Button } from '@mui/material';\r\n// import style from './ListarUsuario.module.scss'\r\n// import DeleteIcon from '@mui/icons-material/Delete';\r\n// import EditIcon from '@mui/icons-material/Edit';\r\n\r\n\r\n// function Row(props) {\r\n//     const { row, setId, editUser, setItens } = props;\r\n//     const [open, setOpen] = React.useState(false);\r\n\r\n//     function Editar(id) {\r\n//       setId(id);\r\n//       editUser();\r\n//     }\r\n  \r\n//     const DelUser = (e) => {\r\n//       console.log(e)\r\n//       setItens(e)\r\n//       document.getElementById('avisaDel').showModal();\r\n//       document.getElementById('confirmaDel').innerHTML = (`Confirme para deletar ${e.nome}`)\r\n//   }\r\n  \r\n//     return (\r\n//       <React.Fragment>\r\n//         <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n//           <TableCell component=\"th\" scope=\"row\">\r\n//               <div className={style.botoes}>\r\n//                   <button title=\"Editar\" onClick={() => Editar(row)}>\r\n//                       <EditIcon fontSize=\"small\" color='warning' />\r\n//                   </button>\r\n//                   <button title=\"Apagar\">\r\n//                       <DeleteIcon onClick={() => DelUser(row)} fontSize=\"small\" color=\"error\" />\r\n//                   </button>\r\n//               </div>\r\n//           </TableCell>\r\n//           <TableCell>{row.nome}</TableCell>\r\n//           <TableCell align=\"right\">{row.rg}</TableCell>\r\n//           <TableCell align=\"right\">{row.cpf}</TableCell>\r\n//           <TableCell align=\"right\">{row.tel}</TableCell>\r\n//           <TableCell align=\"right\">{row.email}</TableCell>\r\n//           <TableCell>\r\n//             <IconButton\r\n//               aria-label=\"expand row\"\r\n//               size=\"small\"\r\n//               onClick={() => setOpen(!open)}\r\n//             >\r\n//               {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n//             </IconButton>\r\n//           </TableCell>\r\n//         </TableRow>\r\n//         <TableRow>\r\n//           <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n//             <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n//               <Box sx={{ margin: 1 }}>\r\n//                 <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n//                   Detalhes\r\n//                 </Typography>\r\n//                 <Table size=\"small\" aria-label=\"purchases\">\r\n//                   <TableHead>\r\n//                     <TableRow>\r\n//                       <TableCell>Cep</TableCell>\r\n//                       <TableCell>Rua</TableCell>\r\n//                       <TableCell align=\"right\">Numero</TableCell>\r\n//                       <TableCell align=\"right\">Complemento</TableCell>\r\n//                       <TableCell align=\"right\">Bairro</TableCell>\r\n//                       <TableCell align=\"right\">Cidade</TableCell>\r\n//                       <TableCell align=\"right\">UF</TableCell>\r\n//                     </TableRow>\r\n//                   </TableHead>\r\n//                   <TableBody>\r\n//                       <TableRow>\r\n//                         <TableCell component=\"th\" scope=\"row\">{row.cep}</TableCell>\r\n//                         <TableCell>{row.logradouro}</TableCell>\r\n//                         <TableCell align=\"center\">{row.numero}</TableCell>\r\n//                         <TableCell align=\"right\">{row.complemento}</TableCell>\r\n//                         <TableCell align=\"right\">{row.bairro}</TableCell>\r\n//                         <TableCell align=\"right\">{row.cidade}</TableCell>\r\n//                         <TableCell align=\"right\">{row.uf}</TableCell>\r\n//                       </TableRow>\r\n//                   </TableBody>\r\n//                 </Table>\r\n//               </Box>\r\n//             </Collapse>\r\n//           </TableCell>\r\n//         </TableRow>\r\n//       </React.Fragment>\r\n//     );\r\n//   }   \r\n\r\n//   function descendingComparator(a, b, orderBy) {\r\n//     if (b[orderBy] < a[orderBy]) {\r\n//       return -1;\r\n//     }\r\n//     if (b[orderBy] > a[orderBy]) {\r\n//       return 1;\r\n//     }\r\n//     return 0;\r\n//   }\r\n  \r\n//   function getComparator(order, orderBy) {\r\n//     return order === 'desc'\r\n//       ? (a, b) => descendingComparator(a, b, orderBy)\r\n//       : (a, b) => -descendingComparator(a, b, orderBy);\r\n//   }\r\n  \r\n//   function stableSort(array, comparator) {\r\n//     const stabilizedThis = array.map((el, index) => [el, index]);\r\n//     stabilizedThis.sort((a, b) => {\r\n//       const order = comparator(a[0], b[0]);\r\n//       if (order !== 0) {\r\n//         return order;\r\n//       }\r\n//       return a[1] - b[1];\r\n//     });\r\n//     return stabilizedThis.map((el) => el[0]);\r\n//   }\r\n\r\n\r\n\r\n// export function ListarUsuario({viewUser, setId, editUser}) {\r\n\r\n//   const [usuario, setUsuario] = React.useState(\"\");\r\n//   const [itens, setItens] = React.useState(\"\")\r\n\r\n//   React.useEffect(() => {\r\n//     axios.get('http://localhost:3001/Usuarios/Listar')\r\n//     .then(res => {\r\n//         setUsuario(res.data)\r\n//     })\r\n//     .catch(err => console.log(err))\r\n//   }, []);\r\n  \r\n//   function DeleteUser() {\r\n//     let { _id } = itens\r\n//     axios.post('http://localhost:3001/Usuario/Deletar', { _id })\r\n//     .then(res => {\r\n//         if (res.data.deletedCount === 0) { return; }\r\n//         else {\r\n//             axios.get('http://localhost:3001/Usuarios/Listar')\r\n//             .then(res => setUsuario(res.data))\r\n//             .catch(err => console.log(err))\r\n//     }})\r\n//     .catch(err => console.log(err))\r\n//   }\r\n  \r\n//   if (usuario) {\r\n//     return (<>\r\n//         <dialog id='avisaDel' className={style.DialogoDeletar} onClick={() => document.getElementById(\"avisaDel\").close()}>\r\n//             <div>\r\n//                 <p id='confirmaDel'>teste</p>\r\n//                 <Button onClick={DeleteUser} variant='outlined' >Confirmar</Button>\r\n//                 <Button onClick={() => document.getElementById(\"avisaDel\").close()} variant='outlined' >Cancelar</Button>\r\n//             </div>\r\n//         </dialog>\r\n//       <TableContainer component={Paper}>\r\n//         <Table aria-label=\"collapsible table\" size='small'>\r\n//           <TableHead>\r\n//             <TableRow>\r\n//               <TableCell/>\r\n//               <TableCell>Nome</TableCell>\r\n//               <TableCell align=\"center\">RG</TableCell>\r\n//               <TableCell align=\"center\">CPF</TableCell>\r\n//               <TableCell align=\"center\">Telefone</TableCell>\r\n//               <TableCell align=\"center\">Email</TableCell>\r\n//               <TableCell />\r\n//             </TableRow>\r\n//           </TableHead>\r\n//           <TableBody>\r\n//             {usuario.map((row) => (\r\n//               <Row key={row.name} row={row} DeleteUser={DeleteUser} setItens={setItens} setId={setId} viewUser={viewUser} editUser={editUser}/>\r\n//             ))}\r\n//           </TableBody>\r\n//         </Table>\r\n//       </TableContainer>\r\n//     </>);\r\n//   } else {\r\n//     return null\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import * as React from 'react';\r\n// import PropTypes from 'prop-types';\r\n// import { alpha } from '@mui/material/styles';\r\n// import Box from '@mui/material/Box';\r\n// import Table from '@mui/material/Table';\r\n// import TableBody from '@mui/material/TableBody';\r\n// import TableCell from '@mui/material/TableCell';\r\n// import TableContainer from '@mui/material/TableContainer';\r\n// import TableHead from '@mui/material/TableHead';\r\n// import TablePagination from '@mui/material/TablePagination';\r\n// import TableRow from '@mui/material/TableRow';\r\n// import TableSortLabel from '@mui/material/TableSortLabel';\r\n// import Toolbar from '@mui/material/Toolbar';\r\n// import Typography from '@mui/material/Typography';\r\n// import Paper from '@mui/material/Paper';\r\n// import Checkbox from '@mui/material/Checkbox';\r\n// import IconButton from '@mui/material/IconButton';\r\n// import Tooltip from '@mui/material/Tooltip';\r\n// import FormControlLabel from '@mui/material/FormControlLabel';\r\n// import Switch from '@mui/material/Switch';\r\n// import DeleteIcon from '@mui/icons-material/Delete';\r\n// import FilterListIcon from '@mui/icons-material/FilterList';\r\n// import { visuallyHidden } from '@mui/utils';\r\n\r\n// function createData(name, calories, fat, carbs, protein) {\r\n//   return {\r\n//     name,\r\n//     calories,\r\n//     fat,\r\n//     carbs,\r\n//     protein,\r\n//   };\r\n// }\r\n\r\n// const rows = [\r\n//   createData('Cupcake', 305, 3.7, 67, 4.3),\r\n//   createData('Donut', 452, 25.0, 51, 4.9),\r\n//   createData('Eclair', 262, 16.0, 24, 6.0),\r\n//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n//   createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n//   createData('Honeycomb', 408, 3.2, 87, 6.5),\r\n//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n//   createData('Jelly Bean', 375, 0.0, 94, 0.0),\r\n//   createData('KitKat', 518, 26.0, 65, 7.0),\r\n//   createData('Lollipop', 392, 0.2, 98, 0.0),\r\n//   createData('Marshmallow', 318, 0, 81, 2.0),\r\n//   createData('Nougat', 360, 19.0, 9, 37.0),\r\n//   createData('Oreo', 437, 18.0, 63, 4.0),\r\n// ];\r\n\r\n// function descendingComparator(a, b, orderBy) {\r\n//   if (b[orderBy] < a[orderBy]) {\r\n//     return -1;\r\n//   }\r\n//   if (b[orderBy] > a[orderBy]) {\r\n//     return 1;\r\n//   }\r\n//   return 0;\r\n// }\r\n\r\n// function getComparator(order, orderBy) {\r\n//   return order === 'desc'\r\n//     ? (a, b) => descendingComparator(a, b, orderBy)\r\n//     : (a, b) => -descendingComparator(a, b, orderBy);\r\n// }\r\n\r\n// // This method is created for cross-browser compatibility, if you don't\r\n// // need to support IE11, you can use Array.prototype.sort() directly\r\n// function stableSort(array, comparator) {\r\n//   const stabilizedThis = array.map((el, index) => [el, index]);\r\n//   stabilizedThis.sort((a, b) => {\r\n//     const order = comparator(a[0], b[0]);\r\n//     if (order !== 0) {\r\n//       return order;\r\n//     }\r\n//     return a[1] - b[1];\r\n//   });\r\n//   return stabilizedThis.map((el) => el[0]);\r\n// }\r\n\r\n// const headCells = [];\r\n\r\n// function EnhancedTableHead(props) {\r\n//   const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\r\n//     props;\r\n//   const createSortHandler = (property) => (event) => {\r\n//     onRequestSort(event, property);\r\n//   };\r\n\r\n//   return (\r\n//     <TableHead>\r\n//       <TableRow>\r\n//         <TableCell padding=\"checkbox\">\r\n//           <Checkbox\r\n//             color=\"primary\"\r\n//             indeterminate={numSelected > 0 && numSelected < rowCount}\r\n//             checked={rowCount > 0 && numSelected === rowCount}\r\n//             onChange={onSelectAllClick}\r\n//             inputProps={{\r\n//               'aria-label': 'select all desserts',\r\n//             }}\r\n//           />\r\n//         </TableCell>\r\n//         {headCells.map((headCell) => (\r\n//           <TableCell\r\n//             key={headCell.id}\r\n//             align={headCell.numeric ? 'right' : 'left'}\r\n//             padding={headCell.disablePadding ? 'none' : 'normal'}\r\n//             sortDirection={orderBy === headCell.id ? order : false}\r\n//           >\r\n//             <TableSortLabel\r\n//               active={orderBy === headCell.id}\r\n//               direction={orderBy === headCell.id ? order : 'asc'}\r\n//               onClick={createSortHandler(headCell.id)}\r\n//             >\r\n//               {headCell.label}\r\n//               {orderBy === headCell.id ? (\r\n//                 <Box component=\"span\" sx={visuallyHidden}>\r\n//                   {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n//                 </Box>\r\n//               ) : null}\r\n//             </TableSortLabel>\r\n//           </TableCell>\r\n//         ))}\r\n//       </TableRow>\r\n//     </TableHead>\r\n//   );\r\n// }\r\n\r\n// EnhancedTableHead.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n//   onRequestSort: PropTypes.func.isRequired,\r\n//   onSelectAllClick: PropTypes.func.isRequired,\r\n//   order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n//   orderBy: PropTypes.string.isRequired,\r\n//   rowCount: PropTypes.number.isRequired,\r\n// };\r\n\r\n// function EnhancedTableToolbar(props) {\r\n//   const { numSelected } = props;\r\n\r\n//   return (\r\n//     <Toolbar\r\n//       sx={{\r\n//         pl: { sm: 2 },\r\n//         pr: { xs: 1, sm: 1 },\r\n//         ...(numSelected > 0 && {\r\n//           bgcolor: (theme) =>\r\n//             alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\r\n//         }),\r\n//       }}\r\n//     >\r\n//       {numSelected > 0 ? (\r\n//         <Typography\r\n//           sx={{ flex: '1 1 100%' }}\r\n//           color=\"inherit\"\r\n//           variant=\"subtitle1\"\r\n//           component=\"div\"\r\n//         >\r\n//           {numSelected} selected\r\n//         </Typography>\r\n//       ) : (\r\n//         <Typography\r\n//           sx={{ flex: '1 1 100%' }}\r\n//           variant=\"h6\"\r\n//           id=\"tableTitle\"\r\n//           component=\"div\"\r\n//         >\r\n//           Nutrition\r\n//         </Typography>\r\n//       )}\r\n\r\n//       {numSelected > 0 ? (\r\n//         <Tooltip title=\"Delete\">\r\n//           <IconButton>\r\n//             <DeleteIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       ) : (\r\n//         <Tooltip title=\"Filter list\">\r\n//           <IconButton>\r\n//             <FilterListIcon />\r\n//           </IconButton>\r\n//         </Tooltip>\r\n//       )}\r\n//     </Toolbar>\r\n//   );\r\n// }\r\n\r\n// EnhancedTableToolbar.propTypes = {\r\n//   numSelected: PropTypes.number.isRequired,\r\n// };\r\n\r\n// export default function EnhancedTable() {\r\n//   const [order, setOrder] = React.useState('asc');\r\n//   const [orderBy, setOrderBy] = React.useState('calories');\r\n//   const [selected, setSelected] = React.useState([]);\r\n//   const [page, setPage] = React.useState(0);\r\n//   const [dense, setDense] = React.useState(false);\r\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n//   const handleRequestSort = (event, property) => {\r\n//     const isAsc = orderBy === property && order === 'asc';\r\n//     setOrder(isAsc ? 'desc' : 'asc');\r\n//     setOrderBy(property);\r\n//   };\r\n\r\n//   const handleSelectAllClick = (event) => {\r\n//     if (event.target.checked) {\r\n//       const newSelected = rows.map((n) => n.name);\r\n//       setSelected(newSelected);\r\n//       return;\r\n//     }\r\n//     setSelected([]);\r\n//   };\r\n\r\n//   const handleClick = (event, name) => {\r\n//     const selectedIndex = selected.indexOf(name);\r\n//     let newSelected = [];\r\n\r\n//     if (selectedIndex === -1) {\r\n//       newSelected = newSelected.concat(selected, name);\r\n//     } else if (selectedIndex === 0) {\r\n//       newSelected = newSelected.concat(selected.slice(1));\r\n//     } else if (selectedIndex === selected.length - 1) {\r\n//       newSelected = newSelected.concat(selected.slice(0, -1));\r\n//     } else if (selectedIndex > 0) {\r\n//       newSelected = newSelected.concat(\r\n//         selected.slice(0, selectedIndex),\r\n//         selected.slice(selectedIndex + 1),\r\n//       );\r\n//     }\r\n\r\n//     setSelected(newSelected);\r\n//   };\r\n\r\n//   const handleChangePage = (event, newPage) => {\r\n//     setPage(newPage);\r\n//   };\r\n\r\n//   const handleChangeRowsPerPage = (event) => {\r\n//     setRowsPerPage(parseInt(event.target.value, 10));\r\n//     setPage(0);\r\n//   };\r\n\r\n//   const handleChangeDense = (event) => {\r\n//     setDense(event.target.checked);\r\n//   };\r\n\r\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n//   // Avoid a layout jump when reaching the last page with empty rows.\r\n//   const emptyRows =\r\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n//   return (\r\n//     <Box sx={{ width: '100%' }}>\r\n//       <Paper sx={{ width: '100%', mb: 2 }}>\r\n//         <EnhancedTableToolbar numSelected={selected.length} />\r\n//         <TableContainer>\r\n//           <Table\r\n//             sx={{ minWidth: 750 }}\r\n//             aria-labelledby=\"tableTitle\"\r\n//             size={dense ? 'small' : 'medium'}\r\n//           >\r\n//             <EnhancedTableHead\r\n//               numSelected={selected.length}\r\n//               order={order}\r\n//               orderBy={orderBy}\r\n//               onSelectAllClick={handleSelectAllClick}\r\n//               onRequestSort={handleRequestSort}\r\n//               rowCount={rows.length}\r\n//             />\r\n//             <TableBody>\r\n//               {/* if you don't need to support IE11, you can replace the `stableSort` call with:\r\n//                  rows.sort(getComparator(order, orderBy)).slice() */}\r\n//               {stableSort(rows, getComparator(order, orderBy))\r\n//                 .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n//                 .map((row, index) => {\r\n//                   const isItemSelected = isSelected(row.name);\r\n//                   const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n//                   return (\r\n//                     <TableRow\r\n//                       hover\r\n//                       onClick={(event) => handleClick(event, row.name)}\r\n//                       role=\"checkbox\"\r\n//                       aria-checked={isItemSelected}\r\n//                       tabIndex={-1}\r\n//                       key={row.name}\r\n//                       selected={isItemSelected}\r\n//                     >\r\n//                       <TableCell padding=\"checkbox\">\r\n//                         <Checkbox\r\n//                           color=\"primary\"\r\n//                           checked={isItemSelected}\r\n//                           inputProps={{\r\n//                             'aria-labelledby': labelId,\r\n//                           }}\r\n//                         />\r\n//                       </TableCell>\r\n//                       <TableCell\r\n//                         component=\"th\"\r\n//                         id={labelId}\r\n//                         scope=\"row\"\r\n//                         padding=\"none\"\r\n//                       >\r\n//                         {row.name}\r\n//                       </TableCell>\r\n//                       <TableCell align=\"right\">{row.calories}</TableCell>\r\n//                       <TableCell align=\"right\">{row.fat}</TableCell>\r\n//                       <TableCell align=\"right\">{row.carbs}</TableCell>\r\n//                       <TableCell align=\"right\">{row.protein}</TableCell>\r\n//                     </TableRow>\r\n//                   );\r\n//                 })}\r\n//               {emptyRows > 0 && (\r\n//                 <TableRow\r\n//                   style={{\r\n//                     height: (dense ? 33 : 53) * emptyRows,\r\n//                   }}\r\n//                 >\r\n//                   <TableCell colSpan={6} />\r\n//                 </TableRow>\r\n//               )}\r\n//             </TableBody>\r\n//           </Table>\r\n//         </TableContainer>\r\n//         <TablePagination\r\n//           rowsPerPageOptions={[5, 10, 25]}\r\n//           component=\"div\"\r\n//           count={rows.length}\r\n//           rowsPerPage={rowsPerPage}\r\n//           page={page}\r\n//           onPageChange={handleChangePage}\r\n//           onRowsPerPageChange={handleChangeRowsPerPage}\r\n//         />\r\n//       </Paper>\r\n//       <FormControlLabel\r\n//         control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n//         label=\"Dense padding\"\r\n//       />\r\n//     </Box>\r\n//   );\r\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module"}